import openai
import pyodbc
import random
from typing import List, Dict
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS

# Thi·∫øt l·∫≠p API key c·ªßa OpenAI
openai.api_key = "sk-123"  # Thay b·∫±ng API key c·ªßa b·∫°n

# Kh·ªüi t·∫°o Flask app
app = Flask(__name__)
CORS(app) 
# K·∫øt n·ªëi t·ªõi database SQL Server
def connect_db():
    try:
        conn = pyodbc.connect(
            'DRIVER={ODBC Driver 17 for SQL Server};'
            'SERVER=THIENHOANNHAA;'
            'DATABASE=wiish;'
            'UID=sa;'
            'PWD=123;'  # Thay YOUR_PASSWORD b·∫±ng m·∫≠t kh·∫©u c·ªßa t√†i kho·∫£n sa
        )
        return conn
    except pyodbc.Error as e:
        print(f"L·ªói k·∫øt n·ªëi database: {e}")
        raise

# Di chuy·ªÉn h√†m remove_diacritics ra ngo√†i ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü nhi·ªÅu n∆°i
def remove_diacritics(text):
    """H√†m chu·∫©n h√≥a text kh√¥ng d·∫•u"""
    text = text.lower()
    replacements = {
        'ƒë': 'd', '√°': 'a', '√†': 'a', '·∫£': 'a', '√£': 'a', '·∫°': 'a',
        'ƒÉ': 'a', '·∫Ø': 'a', '·∫±': 'a', '·∫≥': 'a', '·∫µ': 'a', '·∫∑': 'a', 
        '√¢': 'a', '·∫•': 'a', '·∫ß': 'a', '·∫©': 'a', '·∫´': 'a', '·∫≠': 'a',
        '√©': 'e', '√®': 'e', '·∫ª': 'e', '·∫Ω': 'e', '·∫π': 'e',
        '√™': 'e', '·∫ø': 'e', '·ªÅ': 'e', '·ªÉ': 'e', '·ªÖ': 'e', '·ªá': 'e',
        '√≥': 'o', '√≤': 'o', '·ªè': 'o', '√µ': 'o', '·ªç': 'o',
        '√¥': 'o', '·ªë': 'o', '·ªì': 'o', '·ªï': 'o', '·ªó': 'o', '·ªô': 'o',
        '∆°': 'o', '·ªõ': 'o', '·ªù': 'o', '·ªü': 'o', '·ª°': 'o', '·ª£': 'o',
        '√∫': 'u', '√π': 'u', '·ªß': 'u', '≈©': 'u', '·ª•': 'u',
        '∆∞': 'u', '·ª©': 'u', '·ª´': 'u', '·ª≠': 'u', '·ªØ': 'u', '·ª±': 'u',
        '√≠': 'i', '√¨': 'i', '·ªâ': 'i', 'ƒ©': 'i', '·ªã': 'i',
        '√Ω': 'y', '·ª≥': 'y', '·ª∑': 'y', '·ªπ': 'y', '·ªµ': 'y'
    }
    for src, dst in replacements.items():
        text = text.replace(src, dst)
    return text

# Th√™m m·ªôt s·ªë c√¢u m·ªü ƒë·∫ßu ng·∫´u nhi√™n ƒë·ªÉ tƒÉng t√≠nh ƒëa d·∫°ng
def get_greeting() -> str:
    greetings = [
        "Xin ch√†o! ",
        "Ch√†o b·∫°n! ",
        "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! ",
        "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi shop! ",
        "Ch√†o b·∫°n nh√©! ",
        ""  # Empty greeting for variety
    ]
    return random.choice(greetings)

def get_response_ending() -> str:
    endings = [
        " B·∫°n c·∫ßn th√™m th√¥ng tin g√¨ n·ªØa kh√¥ng? üòä",
        " Hy v·ªçng th√¥ng tin n√†y h·ªØu √≠ch cho b·∫°n!",
        " B·∫°n c√≥ th·∫Øc m·∫Øc g√¨ th√™m kh√¥ng?",
        " C·∫ßn t∆∞ v·∫•n th√™m, b·∫°n c·ª© h·ªèi nh√©!",
        " M√¨nh c√≥ th·ªÉ gi√∫p g√¨ th√™m cho b·∫°n?",
        ""  # Empty ending for variety
    ]
    return random.choice(endings)

# H√†m t√¨m ki·∫øm s·∫£n ph·∫©m trong database
def search_products(query: str) -> List[Dict]:
    conn = connect_db()
    cursor = conn.cursor()
    
    print(f"T√¨m ki·∫øm v·ªõi query: {query}")
    
    normalized_query = remove_diacritics(query)
    keywords = [kw for kw in normalized_query.split() if kw in ["tinh", "dau", "bac", "ha", "cam", "sa", "chanh", "buoi", "oai", "huong", "que", "tram"]]
    
    if not keywords:
        cursor.execute("SELECT pid, name, price, description, stock FROM Product WHERE 1=0")
    else:
        conditions = []
        for kw in keywords:
            conditions.append(f"""
                (LOWER(name) LIKE N'%{kw}%' 
                OR LOWER(description) LIKE N'%{kw}%'
                OR name COLLATE Latin1_General_CI_AI LIKE '%{kw}%'
                OR description COLLATE Latin1_General_CI_AI LIKE '%{kw}%')
            """)
        query_sql = f"""
            SELECT pid, name, price, description, stock 
            FROM Product 
            WHERE {' OR '.join(conditions)}
            AND status = 1
        """
        print(f"Debug - SQL Query: {query_sql}")  # Debug print
        cursor.execute(query_sql)
    
    results = cursor.fetchall()
    print(f"S·ªë s·∫£n ph·∫©m t√¨m th·∫•y: {len(results)}")
    
    conn.close()
    
    products = [{
        "pid": row[0],
        "name": row[1],
        "price": float(row[2]),
        "description": row[3],
        "stock": row[4]
    } for row in results]
    return products

# H√†m g·ªçi OpenAI ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi
def get_openai_response(prompt: str) -> str:
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": """
B·∫°n l√† m·ªôt chatbot b√°n h√†ng th√¥ng minh, gi√∫p g·ª£i √Ω s·∫£n ph·∫©m v√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng.
Shop c√≥ c√°c danh m·ª•c s·∫£n ph·∫©m:
1. Tinh d·∫ßu x√¥ng ph√≤ng
2. Tinh d·∫ßu xe h∆°i
3. Tinh d·∫ßu massage
4. Tinh d·∫ßu d·∫°ng x·ªãt

Khi kh√°ch h·ªèi v·ªÅ danh m·ª•c, h√£y gi·ªõi thi·ªáu c√°c danh m·ª•c tr√™n v√† ƒë·∫∑c ƒëi·ªÉm c·ªßa t·ª´ng lo·∫°i.
            """},
            {"role": "user", "content": prompt}
        ],
        max_tokens=150,
        temperature=0.7
    )
    return response.choices[0].message['content']

# C·∫≠p nh·∫≠t h√†m get_product_info ƒë·ªÉ th√™m c·∫£m x√∫c v√† c√¢u tr·∫£ l·ªùi t·ª± nhi√™n
def get_product_info(query: str) -> str:
    """H√†m l·∫•y th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m"""
    try:
        conn = connect_db()
        cursor = conn.cursor()
        
        normalized_query = remove_diacritics(query.lower())
        
        # T√¨m s·∫£n ph·∫©m c·ª• th·ªÉ
        specific_products = {
            "bac ha": "b·∫°c h√†",
            "buoi": "b∆∞·ªüi", 
            "oai huong": "o·∫£i h∆∞∆°ng",
            "tram": "tr·∫ßm",
            "que": "qu·∫ø",
            "sa chanh": "s·∫£ chanh"
        }
        
        for key, value in specific_products.items():
            if key in normalized_query:
                cursor.execute("""
                    SELECT p.name, p.price, p.description, p.stock, c.categoryName
                    FROM Product p
                    JOIN Category c ON p.cateID = c.categoryID
                    WHERE LOWER(p.name) LIKE ? AND p.status = 1
                """, f"%{value}%")
                
                result = cursor.fetchone()
                if result:
                    intro = random.choice([
                        f"V·ªÅ {result[0]} m√† b·∫°n h·ªèi, ",
                        f"M√¨nh xin gi·ªõi thi·ªáu {result[0]} nh√©! ",
                        f"ƒê√¢y l√† th√¥ng tin v·ªÅ {result[0]} cho b·∫°n: ",
                        f"V·ªÅ s·∫£n ph·∫©m {result[0]} m√† b·∫°n quan t√¢m, "
                    ])
                    
                    stock_status = ""
                    if result[3] > 10:
                        stock_status = f"üíØ C√≤n nhi·ªÅu h√†ng ({result[3]} s·∫£n ph·∫©m)"
                    elif result[3] > 0:
                        stock_status = f"‚ö†Ô∏è S·∫Øp h·∫øt h√†ng (ch·ªâ c√≤n {result[3]} s·∫£n ph·∫©m)"
                    else:
                        stock_status = "‚ùå Hi·ªán ƒëang h·∫øt h√†ng"
                    
                    return f"""{intro}

üè∑Ô∏è **{result[0]}**
üí∞ Gi√°: {result[1]:,.0f} VND
üìã M√¥ t·∫£: {result[2]}
üì¶ T√¨nh tr·∫°ng: {stock_status}
üèÜ Danh m·ª•c: {result[4]}

{get_response_ending()}"""
        
        conn.close()
        return None
        
    except Exception as e:
        print(f"L·ªói trong get_product_info: {str(e)}")
        return None

# C·∫≠p nh·∫≠t h√†m get_price_info ƒë·ªÉ th√™m c·∫£m x√∫c v√† ph·∫£n h·ªìi ƒëa d·∫°ng
def get_price_info(query: str) -> str:
    """H√†m l·∫•y th√¥ng tin v·ªÅ gi√° s·∫£n ph·∫©m"""
    try:
        conn = connect_db()
        cursor = conn.cursor()
        
        if "m·∫Øc nh·∫•t" in query or "ƒë·∫Øt nh·∫•t" in query or "cao nh·∫•t" in query:
            cursor.execute("""
                SELECT TOP 3 name, price, description
                FROM Product
                WHERE status = 1
                ORDER BY price DESC
            """)
            results = cursor.fetchall()
            if results:
                intro = random.choice([
                    "D·∫°, hi·ªán t·∫°i shop c√≥ nh·ªØng s·∫£n ph·∫©m cao c·∫•p sau: ",
                    "M√¨nh xin chia s·∫ª top 3 s·∫£n ph·∫©m cao c·∫•p nh·∫•t c·ªßa shop: ",
                    "ƒê√¢y l√† nh·ªØng s·∫£n ph·∫©m c√≥ gi√° cao nh·∫•t c·ªßa shop nh√©: ",
                ])
                response = f"{intro}\n\n"
                for i, r in enumerate(results, 1):
                    response += f"{i}. **{r[0]}**: {r[1]:,.0f} VND\n   __{r[2]}__\n\n"
                return response + get_response_ending()
                
        elif "r·∫ª nh·∫•t" in query or "th·∫•p nh·∫•t" in query:
            cursor.execute("""
                SELECT TOP 3 name, price, description
                FROM Product
                WHERE status = 1
                ORDER BY price ASC
            """)
            results = cursor.fetchall()
            if results:
                intro = random.choice([
                    "D·∫°, hi·ªán t·∫°i shop c√≥ nh·ªØng s·∫£n ph·∫©m gi√° r·∫ª sau: ",
                    "M√¨nh xin chia s·∫ª top 3 s·∫£n ph·∫©m gi√° r·∫ª nh·∫•t c·ªßa shop: ",
                    "ƒê√¢y l√† nh·ªØng s·∫£n ph·∫©m c√≥ gi√° th·∫•p nh·∫•t c·ªßa shop nh√©: ",
                ])
                response = f"{intro}\n\n"
                for i, r in enumerate(results, 1):
                    response += f"{i}. **{r[0]}**: {r[1]:,.0f} VND\n   __{r[2]}__\n\n"
                return response + get_response_ending()
                
        elif "kho·∫£ng gi√°" in query or "t·∫ßm gi√°" in query:
            cursor.execute("""
                SELECT 
                    MIN(price) as min_price,
                    MAX(price) as max_price,
                    AVG(price) as avg_price
                FROM Product
                WHERE status = 1
            """)
            result = cursor.fetchone()
            if result:
                return f"""
Th√¥ng tin kho·∫£ng gi√° s·∫£n ph·∫©m:
- Gi√° th·∫•p nh·∫•t: {result[0]:,.0f} VND
- Gi√° cao nh·∫•t: {result[1]:,.0f} VND
- Gi√° trung b√¨nh: {result[2]:,.0f} VND
{get_response_ending()}
                """
        
        conn.close()
        return None
        
    except Exception as e:
        print(f"L·ªói trong get_price_info: {str(e)}")
        return None

# C·∫≠p nh·∫≠t h√†m get_products_by_category ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin ƒë·∫ßy ƒë·ªß v√† c√≥ c·∫•u tr√∫c t·ªët h∆°n
def get_products_by_category(category_name: str) -> str:
    """H√†m l·∫•y danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c"""
    try:
        conn = connect_db()
        cursor = conn.cursor()
        
        # Chu·∫©n h√≥a t√™n category
        normalized_category = remove_diacritics(category_name.lower())
        
        # Map c√°c t·ª´ kh√≥a t√¨m ki·∫øm v·ªõi categoryID
        category_keywords = {
            "xong phong": 1,      # Tinh d·∫ßu x√¥ng ph√≤ng
            "xe hoi": 2,          # Tinh d·∫ßu xe h∆°i  
            "treo xe": 2,         # Th√™m t·ª´ kh√≥a ph·ª• cho xe h∆°i
            "o to": 2,            # Th√™m t·ª´ kh√≥a ph·ª• cho xe h∆°i 
            "oto": 2,             # Th√™m t·ª´ kh√≥a ph·ª• cho xe h∆°i
            "xe": 2,              # Th√™m t·ª´ kh√≥a ph·ª• cho xe h∆°i
            "massage": 3,         # Tinh d·∫ßu massage
            "xit": 4,             # Tinh d·∫ßu d·∫°ng x·ªãt
            "dang xit": 4,        # Th√™m t·ª´ kh√≥a ph·ª•
            "tinh dau xit": 4,    # Th√™m t·ª´ kh√≥a ph·ª•
            "spray": 4            # Th√™m t·ª´ kh√≥a ph·ª•
        }
        
        print(f"ƒêang t√¨m category v·ªõi query: {normalized_category}")  # Debug
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i ƒëang t√¨m tinh d·∫ßu d·∫°ng x·ªãt kh√¥ng
        if "xit" in normalized_category or "dang xit" in normalized_category or "spray" in normalized_category:
            category_id = 4
        # Ki·ªÉm tra t·ª´ kh√≥a treo xe ho·∫∑c li√™n quan ƒë·∫øn xe
        elif "treo xe" in normalized_category or "xe hoi" in normalized_category or "o to" in normalized_category or "xe" in normalized_category:
            category_id = 2
        else:
            # Ki·ªÉm tra c√°c t·ª´ kh√≥a kh√°c
            category_id = None
            for key, value in category_keywords.items():
                if key in normalized_category:
                    category_id = value
                    break
        
        if category_id:
            cursor.execute("""
                SELECT p.name, p.price, p.description, p.stock, c.categoryName
                FROM Product p
                JOIN Category c ON p.cateID = c.categoryID
                WHERE c.categoryID = ? AND p.status = 1
                ORDER BY p.price ASC
            """, category_id)
            
            results = cursor.fetchall()
            if results:
                category_name = results[0][4]  # L·∫•y t√™n category t·ª´ k·∫øt qu·∫£ ƒë·∫ßu ti√™n
                
                # S·ª≠ d·ª•ng c√¢u m·ªü ƒë·∫ßu t·ªët h∆°n
                intro = f"""üåø **Danh m·ª•c: {category_name}** üåø

M√¨nh r·∫•t vui ƒë∆∞·ª£c gi·ªõi thi·ªáu v·ªõi b·∫°n c√°c s·∫£n ph·∫©m thu·ªôc danh m·ª•c {category_name} c·ªßa shop:
"""
                # Format t·ª´ng s·∫£n ph·∫©m r√µ r√†ng h∆°n
                product_list = ""
                for i, r in enumerate(results, 1):
                    product_list += f"""
‚ú® **{i}. {r[0]}**
   üí∞ Gi√°: {r[1]:,.0f} VND
   üìù {r[2]}
   üì¶ T√¨nh tr·∫°ng: {'‚úÖ C√≤n h√†ng (' + str(r[3]) + ' s·∫£n ph·∫©m)' if r[3] > 0 else '‚ùå H·∫øt h√†ng'}
"""
                
                # Th√™m l·ªùi khuy√™n ph√π h·ª£p v·ªõi danh m·ª•c
                tips = {
                    1: "üí° Tinh d·∫ßu x√¥ng ph√≤ng s·∫Ω t·∫°o kh√¥ng gian th∆°m m√°t, d·ªÖ ch·ªãu v√† gi√∫p th∆∞ gi√£n.",
                    2: "üí° Tinh d·∫ßu xe h∆°i gi√∫p kh√¥ng gian xe lu√¥n th∆°m tho v√† t·∫°o c·∫£m gi√°c tho·∫£i m√°i khi l√°i xe.",
                    3: "üí° Tinh d·∫ßu massage c√≥ th·ªÉ gi√∫p th∆∞ gi√£n c∆° b·∫Øp v√† gi·∫£m cƒÉng th·∫≥ng m·ªôt c√°ch hi·ªáu qu·∫£.",
                    4: "üí° Tinh d·∫ßu d·∫°ng x·ªãt r·∫•t ti·ªán l·ª£i, d·ªÖ s·ª≠ d·ª•ng v√† ph√π h·ª£p v·ªõi nhi·ªÅu kh√¥ng gian kh√°c nhau."
                }
                
                ending = tips.get(category_id, "") + "\n\n" + get_response_ending()
                
                return intro + product_list + ending
                
            else:
                return f"Hi·ªán t·∫°i shop ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c {category_name}. B·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c danh m·ª•c kh√°c nh√©!"
            
        conn.close()
        return f"Xin l·ªói, m√¨nh kh√¥ng t√¨m th·∫•y danh m·ª•c ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt r√µ h∆°n v·ªÅ s·∫£n ph·∫©m b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng?"
        
    except Exception as e:
        print(f"L·ªói trong get_products_by_category: {str(e)}")
        return f"Xin l·ªói b·∫°n! M√¨nh ƒëang g·∫∑p ch√∫t v·∫•n ƒë·ªÅ khi t√¨m ki·∫øm th√¥ng tin v·ªÅ danh m·ª•c n√†y. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ho·∫∑c h·ªèi v·ªÅ m·ªôt danh m·ª•c kh√°c kh√¥ng?"

def get_category_name(cateID: int, cursor) -> str:
    """H√†m l·∫•y t√™n danh m·ª•c"""
    cursor.execute("SELECT categoryName FROM Category WHERE categoryID = ?", cateID)
    result = cursor.fetchone()
    return result[0] if result else "Kh√¥ng x√°c ƒë·ªãnh"

def get_product_recommendations() -> str:
    """H√†m gi·ªõi thi·ªáu v√† g·ª£i √Ω s·∫£n ph·∫©m theo danh m·ª•c"""
    try:
        conn = connect_db()
        cursor = conn.cursor()
        
        recommendations = """Xin gi·ªõi thi·ªáu c√°c d√≤ng s·∫£n ph·∫©m tinh d·∫ßu t·ªët nh·∫•t c·ªßa shop:

1. Tinh d·∫ßu x√¥ng ph√≤ng:
"""
        # L·∫•y s·∫£n ph·∫©m x√¥ng ph√≤ng b√°n ch·∫°y
        cursor.execute("""
            SELECT TOP 3 name, price, description 
            FROM Product 
            WHERE cateID = 1 AND status = 1 
            ORDER BY price DESC
        """)
        results = cursor.fetchall()
        for r in results:
            recommendations += f"   - {r[0]}: {r[1]:,.0f} VND - {r[2]}\n"

        recommendations += "\n2. Tinh d·∫ßu xe h∆°i:\n"
        cursor.execute("""
            SELECT TOP 3 name, price, description 
            FROM Product 
            WHERE cateID = 2 AND status = 1 
            ORDER BY price DESC
        """)
        results = cursor.fetchall()
        for r in results:
            recommendations += f"   - {r[0]}: {r[1]:,.0f} VND - {r[2]}\n"

        recommendations += "\n3. Tinh d·∫ßu massage:\n"
        cursor.execute("""
            SELECT TOP 3 name, price, description 
            FROM Product 
            WHERE cateID = 3 AND status = 1 
            ORDER BY price DESC
        """)
        results = cursor.fetchall()
        for r in results:
            recommendations += f"   - {r[0]}: {r[1]:,.0f} VND - {r[2]}\n"

        recommendations += "\n4. Tinh d·∫ßu d·∫°ng x·ªãt:\n"
        cursor.execute("""
            SELECT TOP 3 name, price, description 
            FROM Product 
            WHERE cateID = 4 AND status = 1 
            ORDER BY price DESC
        """)
        results = cursor.fetchall()
        for r in results:
            recommendations += f"   - {r[0]}: {r[1]:,.0f} VND - {r[2]}\n"

        recommendations += """
üí° L·ªùi khuy√™n khi ch·ªçn tinh d·∫ßu:
- Tinh d·∫ßu x√¥ng ph√≤ng: Ph√π h·ª£p cho kh√¥ng gian s·ªëng, l√†m vi·ªác
- Tinh d·∫ßu xe h∆°i: Gi√∫p kh·ª≠ m√πi v√† t·∫°o kh√¥ng gian th∆∞ gi√£n khi l√°i xe
- Tinh d·∫ßu massage: An to√†n cho da, gi√∫p th∆∞ gi√£n c∆° th·ªÉ
- Tinh d·∫ßu d·∫°ng x·ªãt: Ti·ªán l·ª£i, d·ªÖ s·ª≠ d·ª•ng, ph√π h·ª£p nhi·ªÅu m·ª•c ƒë√≠ch

B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt b·∫°n ƒëang quan t√¢m ƒë·∫øn lo·∫°i n√†o kh√¥ng?"""

        conn.close()
        return recommendations

    except Exception as e:
        print(f"L·ªói trong get_product_recommendations: {str(e)}")
        return "Xin l·ªói, hi·ªán t·∫°i kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c th√¥ng tin g·ª£i √Ω s·∫£n ph·∫©m."

# Th√™m h√†m m·ªõi ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ giao h√†ng v√† v·∫≠n chuy·ªÉn
def get_shipping_info(query: str) -> str:
    """H√†m tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ giao h√†ng v√† v·∫≠n chuy·ªÉn"""
    query_lower = query.lower()
    
    # C√¢u h·ªèi v·ªÅ th·ªùi gian giao h√†ng
    if any(phrase in query_lower for phrase in ["th·ªùi gian giao h√†ng", "m·∫•t bao l√¢u", "khi n√†o nh·∫≠n ƒë∆∞·ª£c", "giao trong bao l√¢u"]):
        return """üöö **Th√¥ng tin v·ªÅ th·ªùi gian giao h√†ng:**

- N·ªôi th√†nh TP.HCM: 1-2 ng√†y l√†m vi·ªác
- C√°c t·ªânh mi·ªÅn Nam: 2-3 ng√†y l√†m vi·ªác
- C√°c t·ªânh mi·ªÅn Trung v√† mi·ªÅn B·∫Øc: 3-5 ng√†y l√†m vi·ªác
- Khu v·ª±c mi·ªÅn n√∫i v√† h·∫£i ƒë·∫£o: 5-7 ng√†y l√†m vi·ªác

‚è∞ L∆∞u √Ω: Th·ªùi gian giao h√†ng c√≥ th·ªÉ thay ƒë·ªïi t√πy theo ƒëi·ªÅu ki·ªán th·ªùi ti·∫øt v√† t√¨nh tr·∫°ng v·∫≠n chuy·ªÉn.

B·∫°n c√≥ th·ªÉ cung c·∫•p ƒë·ªãa ch·ªâ c·ª• th·ªÉ ƒë·ªÉ m√¨nh ki·ªÉm tra th·ªùi gian giao h√†ng ch√≠nh x√°c h∆°n."""

    # C√¢u h·ªèi v·ªÅ ph√≠ v·∫≠n chuy·ªÉn
    elif any(phrase in query_lower for phrase in ["ph√≠ v·∫≠n chuy·ªÉn", "ph√≠ giao h√†ng", "ship bao nhi√™u", "c∆∞·ªõc v·∫≠n chuy·ªÉn"]):
        return """üí∞ **Th√¥ng tin v·ªÅ ph√≠ v·∫≠n chuy·ªÉn:**

- N·ªôi th√†nh TP.HCM: 15,000 VND
- C√°c t·ªânh th√†nh kh√°c: 30,000 - 50,000 VND t√πy khu v·ª±c
- Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng t·ª´ 500,000 VND

üì¶ Shop s·ª≠ d·ª•ng c√°c ƒë∆°n v·ªã v·∫≠n chuy·ªÉn uy t√≠n nh∆∞ GHTK, GHN, Viettel Post ƒë·ªÉ ƒë·∫£m b·∫£o h√†ng ƒë·∫øn tay b·∫°n an to√†n nh·∫•t."""

    # C√¢u h·ªèi v·ªÅ h√¨nh th·ª©c thanh to√°n
    elif any(phrase in query_lower for phrase in ["thanh to√°n", "tr·∫£ ti·ªÅn", "h√¨nh th·ª©c thanh to√°n", "cod"]):
        return """üí≥ **C√°c h√¨nh th·ª©c thanh to√°n:**

1. Thanh to√°n khi nh·∫≠n h√†ng (COD)
2. Chuy·ªÉn kho·∫£n ng√¢n h√†ng
3. V√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay, VNPay)
4. Th·∫ª t√≠n d·ª•ng/ghi n·ª£

B·∫°n c√≥ th·ªÉ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ph√π h·ª£p khi ti·∫øn h√†nh ƒë·∫∑t h√†ng nh√©!"""

    # Th√¥ng tin ƒë·ªïi tr·∫£
    elif any(phrase in query_lower for phrase in ["ƒë·ªïi tr·∫£", "ho√†n ti·ªÅn", "b·∫£o h√†nh", "ƒë·ªïi s·∫£n ph·∫©m"]):
        return """üîÑ **Ch√≠nh s√°ch ƒë·ªïi tr·∫£:**

- Th·ªùi gian ƒë·ªïi tr·∫£: Trong v√≤ng 7 ng√†y k·ªÉ t·ª´ khi nh·∫≠n h√†ng
- ƒêi·ªÅu ki·ªán: S·∫£n ph·∫©m c√≤n nguy√™n v·∫πn, ch∆∞a s·ª≠ d·ª•ng, c√≤n ƒë·∫ßy ƒë·ªß bao b√¨
- L√Ω do ƒë·ªïi tr·∫£: S·∫£n ph·∫©m l·ªói, h·ªèng, kh√¥ng ƒë√∫ng m√¥ t·∫£

‚ö†Ô∏è L∆∞u √Ω: Tinh d·∫ßu l√† s·∫£n ph·∫©m ƒë·∫∑c bi·ªát, ch·ªâ ƒë∆∞·ª£c ƒë·ªïi tr·∫£ khi s·∫£n ph·∫©m b·ªã l·ªói t·ª´ nh√† s·∫£n xu·∫•t."""
    
    # Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p
    return None

# C·∫≠p nh·∫≠t h√†m chatbot_response v·ªõi th·ª© t·ª± ∆∞u ti√™n h·ª£p l√Ω
def chatbot_response(user_input: str) -> str:
    try:
        input_lower = user_input.lower()
        greeting = get_greeting()
        
        # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ danh m·ª•c tinh d·∫ßu d·∫°ng x·ªãt - ƒë·∫∑t ∆∞u ti√™n cao nh·∫•t
        if ("tinh d·∫ßu" in input_lower and "x·ªãt" in input_lower) or "d·∫°ng x·ªãt" in input_lower:
            category_products = get_products_by_category("tinh d·∫ßu d·∫°ng x·ªãt")
            if category_products:
                return f"{greeting}{category_products}"
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i ƒëang t√¨m m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ kh√¥ng - ƒê·∫∂T L√äN ƒê·∫¶U
        if "tinh d·∫ßu" in input_lower:
            product_info = get_product_info(input_lower)
            if product_info:
                return product_info
        
        # Th√™m ƒëi·ªÅu ki·ªán x·ª≠ l√Ω c√¢u h·ªèi v·ªÅ gi√° - ƒê·∫∂T TH·ª® HAI
        if any(keyword in input_lower for keyword in ["m·∫Øc nh·∫•t", "ƒë·∫Øt nh·∫•t", "r·∫ª nh·∫•t", "kho·∫£ng gi√°", "t·∫ßm gi√°", "cao nh·∫•t", "th·∫•p nh·∫•t", "gi√° bao nhi√™u", "bao nhi√™u ti·ªÅn"]):
            price_info = get_price_info(input_lower)
            if price_info:
                return f"{greeting}{price_info}"
                
        # Th√™m ƒëi·ªÅu ki·ªán x·ª≠ l√Ω y√™u c·∫ßu gi·ªõi thi·ªáu s·∫£n ph·∫©m
        if any(keyword in input_lower for keyword in ["gi·ªõi thi·ªáu", "lo·∫°i n√†o t·ªët", "g·ª£i √Ω", "t∆∞ v·∫•n", "quan t√¢m"]):
            # Ki·ªÉm tra n·∫øu ƒë·ªÅ c·∫≠p t·ªõi danh m·ª•c c·ª• th·ªÉ
            if "x√¥ng ph√≤ng" in input_lower or "xe h∆°i" in input_lower or "massage" in input_lower or "x·ªãt" in input_lower:
                category_products = get_products_by_category(input_lower)
                if category_products:
                    return f"{greeting}{category_products}"
            return get_product_recommendations()
            
        # Th√™m ƒëi·ªÅu ki·ªán ki·ªÉm tra category
        if any(keyword in input_lower for keyword in ["danh m·ª•c", "lo·∫°i", "nh√≥m"]):
            category_products = get_products_by_category(input_lower)
            if category_products:
                return f"{greeting}{category_products}"
        
        # 1. C√¢u h·ªèi v·ªÅ c√¥ng d·ª•ng s·∫£n ph·∫©m
        if any(keyword in input_lower for keyword in ["c√¥ng d·ª•ng", "t√°c d·ª•ng", "ƒë·ªÉ l√†m g√¨", "d√πng ƒë·ªÉ"]):
            product_info = get_product_info(input_lower)
            if product_info:
                return product_info
            return f"{greeting}{get_openai_response(user_input)}"
            
        # 2. C√¢u h·ªèi v·ªÅ gi√° v√† khuy·∫øn m√£i
        if any(keyword in input_lower for keyword in ["gi√°", "khuy·∫øn m√£i", "gi·∫£m gi√°", "combo"]):
            product_info = get_product_info(input_lower)
            if product_info:
                return product_info
            return f"{greeting}Hi·ªán t·∫°i shop ƒëang c√≥ ch∆∞∆°ng tr√¨nh mua 3 t·∫∑ng 1 v·ªõi m·ªôt s·ªë s·∫£n ph·∫©m tinh d·∫ßu x√¥ng ph√≤ng! B·∫°n c√≥ mu·ªën m√¨nh gi·ªõi thi·ªáu c·ª• th·ªÉ kh√¥ng?"
        
        # Thay ƒë·ªïi ph·∫ßn m·∫∑c ƒë·ªãnh t√¨m ki·∫øm s·∫£n ph·∫©m
        if any(keyword in input_lower for keyword in ["t√¨m", "c√≥", "g·ª£i √Ω"]):
            products = search_products(user_input)
            if products:
                intro = random.choice([
                    "M√¨nh t√¨m th·∫•y m·ªôt s·ªë s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n: ",
                    "ƒê√¢y l√† nh·ªØng s·∫£n ph·∫©m m√† m√¨nh nghƒ© b·∫°n s·∫Ω th√≠ch: ",
                    "Shop c√≥ nh·ªØng s·∫£n ph·∫©m sau ƒë√¢y ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n: ",
                ])
                product_list = "\n\n".join([
                    f"‚ú® **{p['name']}**\n  üí∞ {p['price']:,.0f} VND\n  üìù {p['description']}" 
                    for p in products
                ])
                return f"{greeting}{intro}\n\n{product_list}\n\n{get_response_ending()}"
        
        # Th√™m ph·∫£n h·ªìi c√° nh√¢n h√≥a - ƒê·∫∂T SAU C√ôNG
        if "ch√†o" in input_lower or "hello" in input_lower or "hi" in input_lower:
            return f"Ch√†o b·∫°n! üëã M√¨nh l√† tr·ª£ l√Ω c·ªßa shop tinh d·∫ßu. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"
        
        # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ giao h√†ng v√† v·∫≠n chuy·ªÉn
        if any(keyword in input_lower for keyword in ["giao h√†ng", "v·∫≠n chuy·ªÉn", "ship", "th·ªùi gian", "ph√≠", "thanh to√°n", "ƒë·ªïi tr·∫£"]):
            shipping_info = get_shipping_info(input_lower)
            if shipping_info:
                return f"{greeting}{shipping_info}"
        
        # S·ª≠ d·ª•ng OpenAI cho c√°c c√¢u h·ªèi kh√°c
        return f"{greeting}{get_openai_response(user_input)}"
        
    except Exception as e:
        return f"Xin l·ªói b·∫°n! üôá‚Äç‚ôÇÔ∏è M√¨nh ƒëang g·∫∑p ch√∫t v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t: {str(e)}. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá v·ªõi shop qua hotline 1900xxxx nh√©!"

# Route cho trang ch√≠nh
@app.route('/')
def index():
    return render_template('index.html')

# Route x·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
@app.route('/chat', methods=['POST'])
def chat():
    user_input = request.json.get('message')
    response = chatbot_response(user_input)
    return jsonify({'response': response})

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    try:
        # Ki·ªÉm tra k·∫øt n·ªëi database tr∆∞·ªõc khi ch·∫°y
        conn = connect_db()
        print("K·∫øt n·ªëi database th√†nh c√¥ng!")
        conn.close()
    except Exception as e:
        print(f"L·ªói k·∫øt n·ªëi khi kh·ªüi ƒë·ªông: {e}")
    app.run(debug=True, host='localhost', port=5000)